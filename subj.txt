Аэропорт Франкфурта недавно обнаружил, что из-за частых изменений погоды у них есть узкое место на некоторых посадочных путях.
Чтобы найти решение, им в первую очередь нужно знать, какие сценарии создают наихудшие узкие места.
Поэтому они решили использовать симулятор, в котором они настраивают и анализируют несколько сценариев, и надеются, что это выявит на них реальную проблему.
Поэтому они обращаются к своему местному ведущему магазину программного обеспечения и назначают им эту задачу.
Здесь главный конструктор начинает работать над концепцией и, проанализировав все аспекты программного обеспечения, принимает некоторые проектные решения,
которые затем передает вам для создания симулятора.

Поскольку программное обеспечение будет работать на множестве операционных систем в очень жесткой корпоративной среде,
он решает использовать классический объектно-ориентированный язык: Java.
Он предоставит вам:
• диаграмма классов UML
• обязательные шаблоны объектно-ориентированного проектирования
Что вам нужно знать, чтобы быть в команде, разрабатывающей симулятор:
• Интерпретация диаграмм классов — именно так архитектор общается с вами.
• Шаблоны проектирования Observer, Singleton и Factory — он знает, что это не будет окончательной версией симулятора, и он намерен расширить ее,
чтобы удовлетворить другие потребности, которые могут возникнуть в аэропорту.
• Базовый синтаксис Java и некоторые основные функции языка. - это очевидно, так как это согласованная формулировка

Объектно-ориентированный дизайн и шаблоны проектирования — это темы, которые занимают тысячи страниц, поэтому не стесняйтесь исследовать эту область,
и вы откроете для себя новый способ мышления в области разработки программного обеспечения.
А кто знает? Может быть, однажды ты займешь это место архитекторов.
Принимается только хорошая реализация, так как это лучший магазин программного обеспечения в городе. Чтобы это произошло, он должен иметь чистый дизайн,
его будет легко читать и понимать вашим коллегам, и его будет легко изменить в случае изменения требований.

-------------------Основные инструкции
• Вам разрешено использовать языковые функции вплоть до последней версии Java LTS.
• Вам не разрешено использовать какие-либо внешние библиотеки, инструменты сборки или генераторы кода.
• Не используйте пакет по умолчанию.
• Создайте свои собственные соответствующие пакеты, следуя соглашениям об именах пакетов Java.
• Java компилируется в промежуточный язык. Это создаст несколько файлов .class. Не коммитите их в свой репозиторий!
• Убедитесь, что javac и java доступны в качестве команд в вашем терминале.
• Скомпилируйте проект, выполнив приведенные ниже команды, в корне папки вашего проекта.
-----------SCREEN--------------

-------------------Обязательная часть
Вам необходимо реализовать программу моделирования самолета на основе предоставленной вам диаграммы классов.
Все классы должны быть реализованы с учетом каждой детали, представленной на диаграмме.
Не стесняйтесь добавлять дополнительные классы или включать дополнительные атрибуты, если считаете это необходимым,
но не изменяйте модификаторы доступа или иерархию классов для классов, представленных на диаграмме.
IV.1 Поведение программы
Ваша программа будет принимать один и только один аргумент из командной строки.
Этот аргумент представляет собой имя текстового файла, который будет содержать сценарий, который необходимо смоделировать.
Вы можете найти пример файла, предоставленного с темой.
При выполнении программы будет создан файл Simulation.txt, в котором описывается результат моделирования.
Пример: -----------SCREEN------------

IV.2 Файл сценария
Первая строка файла содержит положительное целое число. Это число представляет собой количество запусков симуляции.
В нашем случае это будет количество срабатываний смены погоды.
Каждая следующая строка описывает самолет, который будет участвовать в моделировании, в следующем формате: TYPE NAME LONGITUDE LATITUDE HEIGHT.
IV.3 Генерация погоды
Есть 4 типа погоды:
• RAIN
• FOG
• SUN
• SNOW
Каждая трехмерная точка имеет свою собственную погоду.
Не стесняйтесь использовать любой алгоритм генерации, который вы хотите, если он учитывает координаты точки.

IV.4 Самолеты
• Реактивный самолет:
◦ СОЛНЦЕ (SUN) — широта увеличивается на 10, высота увеличивается на 2
◦ ДОЖДЬ (RAIN) — Широта увеличивается на 5
◦ ТУМАН (FOG) — Широта увеличивается на 1
◦ СНЕГ (SNOW) — высота уменьшается на 7
• Вертолет:
◦ СОЛНЦЕ — долгота увеличивается на 10, высота увеличивается на 2
◦ ДОЖДЬ — долгота увеличивается на 5
◦ ТУМАН — долгота увеличивается на 1
◦ СНЕГ — высота уменьшается на 12
• Надувной шарик:
◦ СОЛНЦЕ — долгота увеличивается на 2, высота увеличивается на 4
◦ ДОЖДЬ — Высота уменьшается на 5
◦ ТУМАН — высота уменьшается на 3
◦ СНЕГ — высота уменьшается на 15

IV.5 Моделирование
• Координаты — положительные числа.
• Высота находится в диапазоне 0-100.
• Если самолету необходимо преодолеть верхний предел высоты, он остается равным 100.
• Каждый раз, когда создается самолет, он получает уникальный идентификатор. Не может быть 2 самолетов с одинаковым ID.
• Если дрон достигает высоты 0 или должен опуститься ниже нее, дрон приземляется,
отменяет регистрацию в метеобашне и регистрирует свои текущие координаты.
• Когда происходит изменение погоды, каждый тип воздушного судна должен зарегистрировать сообщение, как показано в примере.
Формат сообщения: TYPE#NAME(UNIQUE_ID): SPECIFIC_MESSAGE. Смешное сообщение будет оценено во время исправления.
• Каждый раз, когда воздушное судно регистрируется или отменяет регистрацию в/из метеобашни, будет регистрироваться сообщение.
IV.6 Валидация
Входной файл должен быть проверен. Любое ненормальное поведение из-за неверных входных данных неприемлемо.
Если данные входного файла неверны, программа останавливает выполнение. Любые сообщения об ошибках будут выводиться на стандартный вывод.





---------------------Бонусная часть
Бонусные баллы начисляются, если:
• Вы создаете свои собственные исключения для обработки ненормального поведения.
• Ваша программа может читать содержимое входного файла, если оно зашифровано с помощью MD5.
